---
- name: Set SELinux context for webapp files
  community.general.sefcontext:
    setype: etc_runtime_t
    state: present
    target: "/data/webapps(/.*)?"

- name: Set SELinux context for log directory
  community.general.sefcontext:
    target: "/data/webapps/{{ application }}/shared/log(/.*)?"
    setype: var_log_t
    state: present

- name: Apply SELinux context to log directory
  command: "restorecon -R /data/webapps/{{ application }}/shared/log"
  # changed_when: false

- name: Check for existing SELinux module
  shell: "set -e -o pipefail && semodule -l | grep unicorn_nginx"
  failed_when: False
  # changed_when: False
  register: selinux_present

- name: Copy over SELinux policy
  copy:
    src: unicorn_nginx.te
    dest: /tmp/unicorn_nginx.te
    mode: 0777
    owner: root
    group: root
  when:
    - not ansible_check_mode
    - selinux_present.rc > 0

- name: Check SELinux policy
  command: /usr/bin/checkmodule -M -m -o /tmp/unicorn_nginx.mod /tmp/unicorn_nginx.te
  when:
    - not ansible_check_mode
    - selinux_present.rc > 0

- name: Build SELinux policy
  command: /usr/bin/semodule_package -o /tmp/unicorn_nginx.pp -m /tmp/unicorn_nginx.mod
  when:
    - not ansible_check_mode
    - selinux_present.rc > 0

- name: Apply SELinux policy
  command: /usr/sbin/semodule -i /tmp/unicorn_nginx.pp
  when:
    - not ansible_check_mode
    - selinux_present.rc > 0

- name: Cleanup SELinux policy
  file:
    path: /tmp/unicorn_nginx.te
    state: absent
  when:
    - not ansible_check_mode
    - selinux_present.rc > 0

- name: Set context on custom ports
  seport:
    ports: "{{ item }}"
    proto: tcp
    reload: yes
    setype: http_port_t
    state: present
  with_dict: "{{ ports }}"
  when: ports is defined